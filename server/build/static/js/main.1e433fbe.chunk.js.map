{"version":3,"sources":["logo.svg","socket.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HOST","window","location","origin","replace","socket","openSocket","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addMessage","data","console","log","setState","messages","toConsumableArray","state","concat","timestamp","message","onMessageChange","bind","assertThisInitialized","onSubmit","self","on","cb","_this2","err","emit","e","target","value","react_default","a","createElement","className","map","x","onChange","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oPCEpCC,EAAOC,OAAOC,SAASC,OAAOC,QAAQ,QAAS,MAGpCC,EAFCC,IAAWN,OC2DZO,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAyBRQ,WAAa,SAAAC,GACXC,QAAQC,IAAIF,GACZR,EAAKW,SAAS,CAACC,SAASX,OAAAY,EAAA,EAAAZ,CAAKD,EAAKc,MAAMF,UAAjBG,OAAA,CAA2BP,MAClDC,QAAQC,IAAIV,EAAKc,MAAMF,WA3BvBZ,EAAKc,MAAQ,CACXE,UAAW,mBACXC,QAAQ,OACRL,SAAU,IAGZZ,EAAKkB,gBAAiBlB,EAAKkB,gBAAgBC,KAArBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACtBA,EAAKO,WAAYP,EAAKO,WAAWY,KAAhBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACjBA,EAAKqB,SAASrB,EAAKqB,SAASF,KAAdlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACd,IAAIsB,EAAIrB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,IAXS,OAYjBJ,EAAO2B,GAAG,kBAAmB,SAASf,GACpCC,QAAQC,IAAI,kBAAmBF,GAC/Bc,EAAKf,WAAWC,KAdDR,mFAiBC,IAtBIwB,EAsBJC,EAAAtB,KAtBIqB,EAyBL,SAACE,EAAKV,GAAN,OAAoBS,EAAKd,SAAS,CAChDK,eAzBLpB,EAAO2B,GAAG,QAAS,SAAAP,GAAS,OAAIQ,EAAG,KAAMR,KACzCpB,EAAO+B,KAAK,mBAAoB,6CAkChBC,GACdzB,KAAKQ,SAAS,CAACM,QAASW,EAAEC,OAAOC,2CAIjClC,EAAO+B,KAAK,eAAgB,CAC1BV,QAAUd,KAAKW,MAAMG,2CAKvB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,4BAC4B/B,KAAKW,MAAME,UACpCb,KAAKW,MAAMF,SAASuB,IAAI,SAAAC,GAAsB,OAAhB3B,QAAQC,IAAI0B,GAAWL,EAAAC,EAAAC,cAAA,SAAIG,EAAEnB,WAC5Dc,EAAAC,EAAAC,cAAA,SAAOH,MAAO3B,KAAKW,MAAMG,QAASoB,SAAUlC,KAAKe,kBACjDa,EAAAC,EAAAC,cAAA,UAAQK,QAASnC,KAAKkB,UAAtB,gBAhDUkB,aCIEC,QACW,cAA7BhD,OAAOC,SAASgD,UAEe,UAA7BjD,OAAOC,SAASgD,UAEhBjD,OAAOC,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e433fbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1c92b8a7.svg\";","import openSocket from 'socket.io-client';\n\nvar HOST = window.location.origin.replace(/^http/, 'ws')\nconst  socket = openSocket(HOST);\n\nexport default socket;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport socket from './socket';\nfunction subscribeToTimer(cb) {\n  socket.on('timer', timestamp => cb(null, timestamp));\n  socket.emit('subscribeToTimer', 1000);\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timestamp: 'no timestamp yet',\n      message:'here',\n      messages: []\n\n    };\n    this.onMessageChange= this.onMessageChange.bind(this);\n    this.addMessage= this.addMessage.bind(this);\n    this.onSubmit=this.onSubmit.bind(this);\n    var self = this;\n    socket.on('RECEIVE_MESSAGE', function(data){\n      console.log('RECEIVE_MESSAGE', data)\n      self.addMessage(data);\n    })\n  }\n  componentDidMount() {\n\n\n    subscribeToTimer((err, timestamp) => this.setState({\n       timestamp\n     }));\n  }\n\n\n  addMessage = data => {\n    console.log(data);\n    this.setState({messages: [...this.state.messages, data]});\n    console.log(this.state.messages);\n  }\n  onMessageChange(e){\n    this.setState({message: e.target.value});\n\n  }\n  onSubmit(){\n    socket.emit('SEND_MESSAGE', {\n      message:  this.state.message\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        This is the timer value: {this.state.timestamp}\n        {this.state.messages.map(x=> { console.log(x) ;return <p>{x.message}</p>})}\n        <input value={this.state.message} onChange={this.onMessageChange}/>\n        <button onClick={this.onSubmit}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}